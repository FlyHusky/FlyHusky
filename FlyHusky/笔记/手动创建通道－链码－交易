#本部分用于演示在peer,order,cli　容器运行后，手动创建通道，加入通道，安装chaincode,实例化链码，在查询，交易。

#1-首先进入到cli，cli是个工具箱，
docker exec -it cli bash

#设置环境变量，　order的ca证书目录，通道名称，peer位置，peer的证书，peer的通讯地址。
export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
export CHANNEL_NAME="mychannel"
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=peer0.org1.example.com:7051


#2-创建通道。-o 表示order的地址，　
peer channel create -o orderer.example.com:7050 -c $CHANNEL_NAME -f ./channel-artifacts/channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA >&log.txt

#3-加入通道
peer channel join -b $CHANNEL_NAME.block

#4-安装链码。这里指明安装的go语言程序所在的目录,go程序实现了对数据库(账本)的增删改查。
export CC_SRC_PATH="github.com/chaincode/chaincode_example02/go/"
peer chaincode install -n mycc -v 1.0 -l "golang"  -p ${CC_SRC_PATH} >&log.txt

#5-实例化链码-部署链码 (go链码会被到放容器中运行:　这里它名叫　dev-peer0.org1.example.com-mycc-1.0）
#输入 docker attach dev-peer0.org1.example.com-mycc-1.0 ,可以进入链码，查看到链码在运行是输出的信息。
peer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc  -v 1.0 -c '{"Args":["init","a","100","b","200"]}' -P"OR('Org1MSP.peer','Org2MSP.peer')" 

#6- 查询链码 
peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'
#　-c 指定通道名字　　-n 链码的名字　　>&log.txt 即将本条命令执行后返回的信息存入log.txt中。
